{"version":3,"sources":["serviceWorker.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","menuItemClickHandle","e","_ref","name","setState","activeItemName","alert","showMenu","el","sideBarShowed","state","io","IntersectionObserver","entry","forEach","v","i","isIntersecting","target","classList","add","remove","slice","document","querySelectorAll","observe","_this$state","react_default","a","createElement","Container","textAlign","Menu","inverted","fixed","size","fluid","Item","active","color","onClick","position","Icon","className","vertical","style","marginBottom","Input","icon","placeholder","Label","Divider","Header","as","marginTop","Segment","overflow","boxShadow","border","map","piled","key","Grid","Column","width","Image","src","rounded","centered","attached","Component","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.147cf6c8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React,{Component} from 'react';\r\n\r\nimport \"./App.scss\";\r\n\r\nimport {Container,Header,Divider,Segment,Menu, Grid, Image, Input, Icon, Label} from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nclass App extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            activeItemName: 'home',\r\n            sideBarShowed: false\r\n        };\r\n    }\r\n    menuItemClickHandle = (e,{name})=>{\r\n        this.setState({activeItemName:name});\r\n        alert(name);\r\n    }\r\n\r\n    showMenu = (e,el)=>{\r\n        this.setState({sideBarShowed:!this.state.sideBarShowed});\r\n    }\r\n\r\n    componentDidMount(){\r\n            var io = new IntersectionObserver(function(entry){\r\n                entry.forEach((v,i)=>{\r\n                    if(v.isIntersecting){\r\n                        v.target.classList.add('segmentArtIntersect');\r\n                    }else{\r\n                        v.target.classList.remove('segmentArtIntersect');\r\n                    }\r\n                });\r\n            });\r\n\r\n            [].slice.call(document.querySelectorAll('.segmentArt')).forEach((v,i)=>{\r\n                    io.observe(v);\r\n            })\r\n\r\n    }\r\n\r\n    render(){\r\n        const {activeItemName,sideBarShowed} = this.state;\r\n        return  <div>\r\n                 \r\n            <Container  textAlign='left' >\r\n                    <Menu inverted fixed='top' size='small'>\r\n                            <Container fluid >\r\n                                <Menu.Item name='home' active={activeItemName==='home'} color='red' onClick={this.menuItemClickHandle} />\r\n                                <Menu.Item name='friend' active={activeItemName==='friend'} color='red' onClick={this.menuItemClickHandle}/>\r\n                                <Menu.Item name='messages' active={activeItemName==='messages'} color='red' onClick={this.menuItemClickHandle}/>      \r\n                                <Menu.Item position='right' >\r\n                                    <Icon name=\"bars\" size='large' className='menuButton' onClick={this.showMenu }/>\r\n                                </Menu.Item>\r\n                            </Container>\r\n                        </Menu>\r\n                        <Menu vertical inverted fixed='right' size='large' className={sideBarShowed?'sideBarShow':'sideBarHidden'}>\r\n                            <Menu.Item style={{marginBottom:'100px'}}><Icon name='close' size='big' onClick={this.showMenu}/></Menu.Item>\r\n                            <Menu.Item><Input icon='search' placeholder=\"Search Something...\"/></Menu.Item>\r\n                            <Menu.Item name='inbox'>\r\n                                <Label color='teal'>1</Label>\r\n                                Inbox\r\n                            </Menu.Item>\r\n                        </Menu>\r\n                    <Divider/>\r\n                    <Header as='h2' style={{marginTop:'50px'}}>Lorem ipsum</Header>\r\n\r\n                    <Divider/>\r\n                    <Segment style={{overflow:'hidden', boxShadow:'none',border:'none'}}>\r\n                    {\r\n                        [1,2,3,4,5,6,7,8,9,10,11,12].map((v,i)=>{\r\n                            return <Segment piled key={i} className={'segmentArt'}> \r\n                                        <Grid className='article'>\r\n                                            <Grid.Column className='text' width={12}>\r\n                                                {i+1} Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor.\r\n                                                Aenean massa strong. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur\r\n                                                ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla\r\n                                                consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu.\r\n                                                In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede\r\n                                                link mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean\r\n                                                vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac,\r\n                                                enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla\r\n                                                ut metus varius laoreet. Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue.\r\n                                                Curabitur ullamcorper ultricies nisi.\r\n                                            </Grid.Column>\r\n                                            <Grid.Column className='img' width={4}>\r\n                                                <Image src={'city.png'}  rounded centered />\r\n                                            </Grid.Column>\r\n                                        </Grid>\r\n                                    </Segment>\r\n\r\n                        })\r\n                    }\r\n                   </Segment>\r\n\r\n            </Container>\r\n            <Segment inverted fixed='bottom' textAlign='center' size='small' attached='bottom' className='footer' >\r\n                            Coded By kska32@gmail.com - 2019\r\n            </Segment>\r\n   \r\n            \r\n      </div>\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}